// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  author        Author?   @relation(fields: [authorId], references: [id])
  authorId      String?   @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id           String   @id @default(cuid())
  name         String
  bio          String
  profileImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?
  posts        Post[]
  Event        Event[]
}

model Post {
  id               String   @id @default(cuid())
  path             String?
  author           Author   @relation(fields: [authorId], references: [id])
  authorId         String
  tags             String[]
  description      String
  body             String   @db.Text
  title            String
  featuredImage    String
  publishedTime    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  showFeatureImage Boolean  @default(false)
}

model PharmaItaly {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  public      Boolean @default(false)
  companyName String
  description String
  address     String
  latitude    Float
  longitude   Float
  region      String
  city        String
  province    String

  @@index([region])
  @@index([region, province])
}

model Event {
  id            String        @id @default(cuid())
  slug          String?
  author        Author        @relation(fields: [authorId], references: [id])
  authorId      String
  tags          String[]
  description   String
  body          String        @db.Text
  title         String
  featuredImage String
  startDate     DateTime
  endDate       DateTime
  location      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tickets       EventTicket[]
}

model EventTicket {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  name        String
  role        String
  avatar      String
  ticketNum   Int
  ticketImage String?

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@unique([eventId, ticketNum])
}
